;;; Format:
;;;  ...
;;;  (((seq1) (seq2) ...) ((seq3) (seq4) ...) ...)
;;;  ...
;;;  (seq5)
;;;  ...
;;;  seq1 and seq2 are equivalent
;;;  seq3 and seq4 are equivalent
;;;  seq1, seq2, seq3, and seq4 are equivalent if cube rotation is ignored (enabled turns are symmetric)
;;;  seq5 is disabled
;;;
;;; Commutative turn groups (U* u* E* d* D*) (F* f* S* b* B*) (L* l* M* r* R*)
;;;  T = U, u, E, d, D, F, f, S, b, B, L, l, M, r, or R
;;;
;;; Move Sequence:
;;;  T* = T, T', or T2
;;;
;;;  turns considered symmetric if: U*=D*=F*=B*=L*=R*, u*=d*=f*=b*=l*=r*, E*=S*=M*, U2=D2=F2=B2=L2=R2, u2=d2=f2=b2=l2=r2, E2=S2=M2
;;;
;;; Format of disabled sequences (seq5 above):
;;;  (move-sequence (condition))
;;;  commutative turn groups (U* u* E* d* D*) (F* f* S* b* B*) (L* l* M* r* R*)
;;;  T = U, u, E, d, D, F, f, S, b, B, L, l, M, r, or R
;;;
;;; Move Sequence:
;;;  T* = T, T', or T2
;;;
;;; Condition:
;;;  C = @, U*, u*, E*, d*, D*, F*, f*, S*, b*, B*, L*, l*, M*, r*, R*,
;;;      U2, u2, E2, d2, D2, F2, f2, S2, b2, B2, L2, l2, M2, r2, or R2
;;;  C enabled -> C2 enabled
;;;  C enabled -> T, T', or T2 enabled (for C = T)
;;;  C2 enabled -> T2 enabled (for C = T)
;;;  @ = U*=D*=F*=B*=L*=R*, u*=d*=f*=b*=l*=r*, E*=S*=M*,
;;;      U2=D2=F2=B2=L2=R2, u2=d2=f2=b2=l2=r2, E2=S2=M2
;;;  all T2 turns in <move-sequence> are automatically put to <condition> as T2
;;;  all T, T', T* turns in <move-sequence> are automatically put to <condition> as T*
(

;;; U* u* E* d* D* group

  (U* U*) ; =U*

  (U2 u2 (E2))
  (U u' (E*))
  (U' u (E*)) ; =E*

  (U2 E2 (u2))
  (U* E* (u*)) ; =U*u*

  (U* d* (@)) ; =U*D*Y*

  (U2 D2 (E2 @))
  (U D' (E* @))
  (U' D (E* @)) ; =E*Y*

  (u* U*) ; =U*u*

  (u* u*) ; =u*

  (u2 E2 (U2))
  (u* E* (U*)) ; =U*u*

  (u2 d2 (U2 D2))
  (u d (U* D*))
  (u' d' (U* D*))
  (u d' (E* @))
  (u' d (E* @))
  (u* d* (U* D* @)) ; =U2D2/UD'/U'D/EY/E'Y'/U*D*Y*

  (u* D* (@)) ; =D*Y*

  (E* U*) ; =U*E*

  (E* u*) ; =u*E*

  (E* E*) ; =E*

  (E2 d2 (D2))
  (E* d* (D*)) ; =d*D*

  (E2 D2 (d2))
  (E* D* (d*)) ; =d*D*

  (d* U*) ; =U*d*

  (d* u*) ; =u*d*

  (d* E*) ; =E*d*

  (d* d*) ; =d*

  (d2 D2 (E2))
  (d D' (E*))
  (d' D (E*)) ; =E*

  (D* U*) ; =U*D*

  (D* u*) ; =u*D*

  (D* E*) ; =E*D*

  (D* d*) ; =d*D*

  (D* D*) ; =D*

;;; F* f* S* b* B* group

  (F* F*) ; =F*

  (F2 f2 (S2))
  (F f' (S*))
  (F' f (S*)) ; =S*

  (F2 S2 (f2))
  (F* S* (f*)) ; =F*f*

  (F* b* (@)) ; =F*B*Z*

  (F2 B2 (S2 @))
  (F B' (S* @))
  (F' B (S* @)) ; =S*Z*

  (f* F*) ; =F*f*

  (f* f*) ; =f*

  (f2 S2 (F2))
  (f* S* (F*)) ; =F*f*

  (f2 b2 (F2 B2))
  (f b (F* B*))
  (f' b' (F* B*))
  (f b' (S* @))
  (f' b (S* @))
  (f* b* (F* B* @)) ; =F2B2/FB'/F'B/SZ/S'Z'/F*B*Z*

  (f* B* (@)) ; =B*Z*

  (S* F*) ; =F*S*

  (S* f*) ; =f*S*

  (S* S*) ; =S*

  (S2 b2 (B2))
  (S* b* (B*)) ; =b*B*

  (S2 B2 (b2))
  (S* B* (b*)) ; =b*B*

  (b* F*) ; =F*b*

  (b* f*) ; =f*b*

  (b* S*) ; =S*b*

  (b* b*) ; =b*

  (b2 B2 (S2))
  (b B' (S*))
  (b' B (S*)) ; =S*

  (B* F*) ; =F*B*

  (B* f*) ; =f*B*

  (B* S*) ; =S*B*

  (B* b*) ; =b*B*

  (B* B*) ; =B*

;;; L* l* M* r* R* group

  (L* L*) ; =L*

  (L2 l2 (M2))
  (L l' (M*))
  (L' l (M*)) ; =M*

  (L2 M2 (l2))
  (L* M* (l*)) ; =L*l*

  (L* r* (@)) ; =L*R*X*

  (L2 R2 (M2 @))
  (L R' (M* @))
  (L' R (M* @)) ; =M*X*

  (l* L*) ; =L*l*

  (l* l*) ; =l*

  (l2 M2 (L2))
  (l* M* (L*)) ; =L*l*

  (l2 r2 (L2 R2))
  (l r (L* R*))
  (l' r' (L* R*))
  (l r' (M* @))
  (l' r (M* @))
  (l* r* (L* R* @)) ; =L2R2/LR'/L'R/MX/M'X'/L*R*X*

  (l* R* (@)) ; =R*X*

  (M* L*) ; =L*M*

  (M* l*) ; =l*M*

  (M* M*) ; =M*

  (M2 r2 (R2))
  (M* r* (R*)) ; =r*R*

  (M2 R2 (r2))
  (M* R* (r*)) ; =r*R*

  (r* L*) ; =L*r*

  (r* l*) ; =l*r*

  (r* M*) ; =M*r*

  (r* r*) ; =r*

  (r2 R2 (M2))
  (r R' (M*))
  (r' R (M*)) ; =M*

  (R* L*) ; =L*R*

  (R* l*) ; =l*R*

  (R* M*) ; =M*R*

  (R* r*) ; =r*R*

  (R* R*) ; =R*
)
